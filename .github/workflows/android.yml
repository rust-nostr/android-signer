name: Build & Publish Android AAR
on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'commit/tag/branch reference'
        required: true
        type: string
      publish:
        description: 'value indicating whether to publish to SonaType.'
        required: true
        type: boolean
        default: false

jobs:
  generate:
    name: Generate Foreign Languages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.7.8

      - name: Install protoc
        run: |
          sudo apt-get update && sudo apt-get upgrade -y
          sudo apt-get install -y protobuf-compiler libprotobuf-dev

      - name: Install uniffi-bindgen
        run: |
          cargo install --bin uniffi-bindgen --path .

      - name: Build debug target
        run: |
          cargo build -p nostr_android_signer_proxy

      - name: Generate Android Kotlin
        run: |
          uniffi-bindgen generate --library target/debug/libnostr_android_signer_proxy.so --config proxy/ffi/uniffi.toml --language kotlin --no-format -o target/uniffi/android-kotlin

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-signer-android-kotlin
          path: target/uniffi/android-kotlin

  build:
    name: Build ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - i686-linux-android
          - armv7-linux-androideabi
          - x86_64-linux-android
          - aarch64-linux-android
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref }}

    - name: Rust Cache
      uses: Swatinem/rust-cache@v2.7.8
      with:
        key: ${{ matrix.target }}

    - name: Install protoc
      run: |
        sudo apt-get update && sudo apt-get upgrade -y
        sudo apt-get install -y protobuf-compiler libprotobuf-dev

    - name: Install cargo-ndk
      run: cargo install cargo-ndk

    - name: Setup NDK
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r26d

    - name: Set ANDROID_NDK_HOME
      run: echo "ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}" >> "$GITHUB_ENV"

    - name: Build library
      run: cargo ndk -t ${{ matrix.target }} build --lib --release

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-signer-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/libnostr_android_signer_proxy.so

  build-aar:
    name: Build AAR & Publish
    runs-on: ubuntu-latest
    needs: [generate, build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - uses: actions/download-artifact@v4
        with:
          name: android-signer-i686-linux-android
          path: target/i686-linux-android/release/

      - uses: actions/download-artifact@v4
        with:
          name: android-signer-armv7-linux-androideabi
          path: target/armv7-linux-androideabi/release/

      - uses: actions/download-artifact@v4
        with:
          name: android-signer-x86_64-linux-android
          path: target/x86_64-linux-android/release/

      - uses: actions/download-artifact@v4
        with:
          name: android-signer-aarch64-linux-android
          path: target/aarch64-linux-android/release/

      - uses: actions/download-artifact@v4
        with:
          name: android-signer-android-kotlin
          path: target/uniffi/android-kotlin

      - name: Assemble AAR
        working-directory: proxy
        run: bash assemble.sh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-signer-aar
          path: proxy/lib/build/outputs/aar/lib-release.aar

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [build, build-aar]
    if: ${{ inputs.publish }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Publish
        working-directory: proxy
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_TOKEN_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_TOKEN_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.MAVEN_SIGNING_SECRET_KEY }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.MAVEN_SIGNING_PASSWORD }}
        run: |
          ./gradlew publishToMavenCentral --no-configuration-cache
